# Try prediction
# rf_ml <- ranger(y_train ~., data = form_train, num.trees = 500, splitrule = "gini", mtry = 69,
#                 importance = "permutation")
rf_pred <- predict(rf, data = form_test)
length(rf_pred)
cm_rf <- confusionMatrix(rf_pred$predictions, as.factor(dat_test$clf))
cm_rf <- confusionMatrix(rf_pred, as.factor(dat_test$clf))
# Try prediction
# rf_ml <- ranger(y_train ~., data = form_train, num.trees = 500, splitrule = "gini", mtry = 69,
#                 importance = "permutation")
rf_pred <- predict(rf, data = form_test)
# Set seed
set.seed(20192603)
# Try prediction
form_train
rf_ml <- ranger(y = y_train, x = x_train, num.trees = 500, splitrule = "gini", mtry = 69, importance = "permutation")
# Try prediction
form_train <- center(form_train[,2:ncol(form_train)])
# Try prediction
form_train <- scale(form_train[,2:ncol(form_train)], center = T)
# Try prediction
form_train <- scale(form_train[,2:(ncol(form_train)-1)], center = T)
rf_ml <- ranger(y = y_train ~., data = form_train, num.trees = 500, splitrule = "gini", mtry = 69, importance = "permutation")
# Try prediction
form_train <- data.frame(cbind(form_train[,1],
scale(form_train[,2:(ncol(form_train)-1)], center = T),
form_train[,ncol(form_train)]), stringsAsFactors = F)
rf_ml <- ranger(y = y_train ~., data = form_train, num.trees = 500, splitrule = "gini", mtry = 69, importance = "permutation")
rf_ml <- ranger(y_train ~., data = form_train, num.trees = 500, splitrule = "gini", mtry = 69, importance = "permutation")
rf_pred <- predict(rf_ml, data = form_test)
rf_pred <- predict(rf_ml, data = form_test)
rf_pred <- predict(rf_ml, newdata = form_test)
rf_pred <- predict(rf, newdata = form_test)
cm_rf <- confusionMatrix(rf_pred, as.factor(dat_test$clf))
cm_rf
vimp <- data.frame(cbind(sort(rf_ml$variable.importance, decreasing = T),
names(sort(rf_ml$variable.importance, decreasing = T))), stringsAsFactors = F) %>%
dplyr::rename(importance = X1,
variable = X2) %>%
mutate(importance = as.numeric(importance)) %>%
dplyr::slice(1:25)
vimp
pdf("data/rf_feat_select_var_imp.pdf", width = 6, height = 6)
ggplot(data = vimp,
aes(x=reorder(variable,importance), y=importance, fill=importance))+
geom_bar(stat="identity", position="dodge")+ coord_flip()+
ylab("Variable Importance")+
xlab("")+
guides(fill=F)+
scale_fill_gradient(low="red", high="blue")
ggsave("data/rf_feat_select_var_imp.jpeg")
dev.off()
cm_list <- list(cm_rf$table)
names(cm_list) <- c("rf_aa_34")
pllist <- list()
for(i in 1:length(cm_list)) {
pllist[[i]] <- ggplot(data.frame(cm_list[[i]]), aes(Prediction, Reference)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low = "white", high = "red") +
ggtitle(names(cm_list)[i]) +
theme(axis.text.x = element_text(angle = 90),
axis.title.x = element_blank())
#axis.title.y = element_blank())
}
# jpeg("output/data_confusion_matrices.jpeg", width = 750, height = 500, res = 300)
pllist[[1]]
# jpeg("output/data_confusion_matrices.jpeg", width = 750, height = 500, res = 300)
pllist[[1]]
cm_list <- list(cm_rf$table)
names(cm_list) <- c("rf_aa_34")
pllist <- list()
for(i in 1:length(cm_list)) {
pllist[[i]] <- ggplot(data.frame(cm_list[[i]]), aes(Prediction, Reference)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low = "white", high = "red") +
ggtitle(names(cm_list)[i]) +
theme(axis.text.x = element_text(angle = 90),
axis.title.x = element_blank())
#axis.title.y = element_blank())
}
# jpeg("output/data_confusion_matrices.jpeg", width = 750, height = 500, res = 300)
pllist[[1]]
saveRDS(rf, "output/rf_small_subst_grp_20192603.rds")
cm_list[[1]]
for(i in 1:length(cm_list)) {
pllist[[i]] <- ggplot(data.frame(cm_list[[i]]), aes(Prediction, Reference)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low = "white", high = "red") +
ggtitle(names(cm_list)[i]) +
theme(axis.text.x = element_text(angle = 90),
axis.title.x = element_blank())
#axis.title.y = element_blank())
}
# jpeg("output/data_confusion_matrices.jpeg", width = 750, height = 500, res = 300)
pllist[[1]]
ggsave("aa34_group_conf_matrices.jpeg", height=4, width=5, units='in')
cm_list[[1]]
pllist[[1]]
pllist <- list()
for(i in 1:length(cm_list)) {
pllist[[i]] <- ggplot(data.frame(cm_list[[i]]), aes(Prediction, Reference)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low = "white", high = "red") +
ggtitle(names(cm_list)[i]) +
theme(axis.text.x = element_text(angle = 90),
axis.title.x = element_blank())
#axis.title.y = element_blank())
}
# jpeg("output/data_confusion_matrices.jpeg", width = 750, height = 500, res = 300)
pllist[[1]]
cm_list <- list(cm_rf$table)
names(cm_list) <- c("rf_aa_34")
pllist[[1]]
pllist <- list()
for(i in 1:length(cm_list)) {
pllist[[i]] <- ggplot(data.frame(cm_list[[i]]), aes(Prediction, Reference)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low = "white", high = "red") +
ggtitle(names(cm_list)[i]) +
theme(axis.text.x = element_text(angle = 90),
axis.title.x = element_blank())
#axis.title.y = element_blank())
}
# jpeg("output/data_confusion_matrices.jpeg", width = 750, height = 500, res = 300)
pllist[[1]]
cm_list[[1]]
cm_list <- list(cm_rf$table)
names(cm_list) <- c("rf_aa_34")
cm_list[[1]]
cm_list[[1]]
str(cm_list[[1]])
# Try prediction
form_train <- data.frame(cbind(form_train[,1],
scale(form_train[,2:(ncol(form_train)-1)], center = T),
form_train[,ncol(form_train)]), stringsAsFactors = F)
rf_ml <- ranger(y_train ~., data = form_train, num.trees = 500, splitrule = "gini", mtry = 69, importance = "permutation")
rf_pred <- predict(rf_ml, newdata = form_test)
# Try prediction
# form_train <- data.frame(cbind(form_train[,1],
#                                scale(form_train[,2:(ncol(form_train)-1)], center = T),
#                                form_train[,ncol(form_train)]), stringsAsFactors = F)
# rf_ml <- ranger(y_train ~., data = form_train, num.trees = 500, splitrule = "gini", mtry = 69, importance = "permutation")
rf$finalModel
rf_pred <- predict(rf, newdata = form_test)
cm_rf <- confusionMatrix(rf_pred, as.factor(dat_test$clf))
cm_rf
# Confusion matrix
getTrainPerf(rf)
cm_list <- list(cm_rf$table)
names(cm_list) <- c("rf_aa_34")
cm_list[[1]]
data.frame(cm_list[[i]])
data.frame(cm_list[[1]])
colnames(data.frame(cm_list[[1]]))
pllist <- list()
for(i in 1:length(cm_list)) {
pllist[[i]] <- ggplot(data.frame(cm_list[[1]]), aes(Prediction, Reference)) +
geom_tile(aes(fill = Freq)) +
geom_text(aes(label = round(Freq, 1))) +
scale_fill_gradient(low = "white", high = "red") +
ggtitle(names(cm_list)[i]) +
theme(axis.text.x = element_text(angle = 90),
axis.title.x = element_blank())
#axis.title.y = element_blank())
}
# jpeg("output/data_confusion_matrices.jpeg", width = 750, height = 500, res = 300)
pllist[[1]]
ggsave("aa34_group_conf_matrices.jpeg", height=4, width=5, units='in')
ggsave("aa34_group_conf_matrices.jpeg", height=10, width=10, units='in')
# jpeg("output/data_confusion_matrices.jpeg", width = 750, height = 500, res = 300)
pllist[[1]]
ggsave("aa34_group_conf_matrices.jpeg", height=10, width=10, units='in')
ggsave("aa34_group_conf_matrices.jpeg", height=5, width=5, units='in')
saveRDS(rf, "output/rf_small_subst_grp_20192603.rds")
ggsave("aa34_group_conf_matrices.jpeg", height=8, width=8, units='in')
saveRDS(rf, "output/rf_small_subst_grp_20192603.rds")
## Install packages
pacman::p_load("DECIPHER", "readxl", "data.table", "Biostrings", "caret", "bgafun", "cowplot", "tidymodels", "ranger", "tree", "rsample", "tidyverse", "randomForest","gbm","nnet","e1071","svmpath","lars","glmnet","svmpath")
# Set working directory
setwd("~/Documents/Wageningen_UR/github/mibig_training_set_build_test/")
# Read in the updated mibig
mib <- read_excel("data/mibig_training_set_manually_edited_20192503.xlsx") %>%
dplyr::filter(confidence < 1) %>%
mutate(substrate_group_tr = str_replace_all(substrate_group, "_", "")) %>%
mutate(sqnams_tr = paste0(bgcs, "_", word(cmpnd, 1, sep = "_"), "_", acc, "_", substrate_group_tr, "_", functional_class))
# Extract the 34 aa signatures
toextract <- AAStringSet(mib$aa_seq)
names(toextract) <-mib$sqnams_tr
writeXStringSet(toextract, '../sandpuma2_serina/flat/185_mibig_low_confidence.fa')
# Extract 34 aa signatures
sigs <- fread('../sandpuma2_serina/flat/185_low_confidence_34_aa_sigs.fa', data.table = F, header = F)
sigaa <- AAStringSet(sigs[,1])
names(sigaa) <- mib$sqnams_tr
writeXStringSet(sigaa, 'data/185_mibig_34_aa_sigs.fa')
# Convert 34 aa signatures to
rdaln <- read.alignment(file = 'data/185_mibig_34_aa_sigs.fa', format = "fasta")
rdaln$seq <- toupper(rdaln$seq)
aa <- bgafun::convert_aln_AAP(rdaln) #5 physicochemical properties
aadf <- data.frame(aa, stringsAsFactors = F)
aap <- aadf %>%
dplyr::mutate(nms = rownames(.)) %>%
dplyr::select(-contains("D")) %>%
dplyr::filter(!grepl("ERROR", X1A))
rownames(aap) <- aap$nms
aap <- aap %>%
dplyr::select(-nms)
colnames(aap) <- gsub("^X","",colnames(aap))
colnames(aap) <- paste0(c("polrty", "secstr", "molsz", "elechrg"), "_", colnames(aap))
numfeats <- length(colnames(aap)) # 1096
aap[,1]
# Read in the ml model
mod <- readRDS("output/rf_small_subst_grp_20192603.rds")
makpred <- predict(mod, data = aap)
makpred <- predict(mod, newdata = aap)
makpred$predictions
makpred
# Write the predictions to file
preds <- write_csv(data.frame(cbind(rownames(aap), as.character(makpred))), "output/185_mibig_and_preds.csv")
cm_rf
cm_rf <- confusionMatrix(rf_pred, as.factor(dat_test$clf))
## Install packages
pacman::p_load("caret", "Biostrings", "seqinr", "DECIPHER", "cowplot", "tidymodels", "ranger", "tree", "rsample", "tidyverse", "randomForest","gbm","nnet","e1071","svmpath","lars","glmnet","svmpath")
# Set working directory
setwd("~/Documents/Wageningen_UR/github/mibig_training_set_build_test/")
# Read in the training set
rawdat <- readAAStringSet("../sandpuma2_serina/flat/740_training_set_34extract.faa")
length(rawdat)
names(rawdat)
# Convert the 740 aa signatures to features
rdaln <- read.alignment(file = '../sandpuma2_serina/flat/740_training_set_34extract.faa', format = "fasta")
rdaln$seq <- toupper(rdaln$seq)
aa <- bgafun::convert_aln_AAP(rdaln) #5 physicochemical properties
aadf <- data.frame(aa, stringsAsFactors = F)
aap <- aadf %>%
dplyr::mutate(nms = rownames(.)) %>%
dplyr::select(-contains("D")) %>%
dplyr::filter(!grepl("ERROR", X1A))
rownames(aap) <- aap$nms
aap <- aap %>%
dplyr::select(-nms)
colnames(aap) <- gsub("^X","",colnames(aap))
colnames(aap) <- paste0(c("polrty", "secstr", "molsz", "elechrg"), "_", colnames(aap))
numfeats <- length(colnames(aap)) # 1096
colnames(aap)
# Read in the data
rawdat <- read_csv(paste0("data/740_seqs_", numfeats, "_feats_for_supervised.csv"))
colnames(rawdat)[1] <- "nms"
rawdat$clf <- word(rawdat$nms, 1, sep = "_")
rawdat$clf <- gsub("-", "\\.", rawdat$clf)
rawdat$clf <- gsub("\\+", ".and.up", rawdat$clf)
table(rawdat$clf)
# Remove the holdout test predictions
dat <- rawdat[-grep(paste0(c("unknown-other"), collapse = "|"), rawdat$nms),] # 658 observations
# Set seed
set.seed(20192603)
# Split into test and training data
dat_split <- initial_split(dat, strata = "clf")
dat_train <- training(dat_split)
dat_test  <- testing(dat_split)
nrow(dat_train)/nrow(dat) # 75 %
# Define our response
x_train <- dat_train[,!colnames(dat_train) %in% c("nms", "clf")]
x_test <- dat_test[,!colnames(dat_test) %in% c("nms", "clf")]
y_train <- as.factor(dat_train$clf)
y_test <- as.factor(dat_test$clf)
table(y_test)
# Make a data frame for prediction
df_train <- data.frame(x_train, stringsAsFactors = F, row.names = dat_train$nms)
# Complete dataset for training and testing
form_train <- data.frame(cbind(x_train, y_train), stringsAsFactors = F, row.names = dat_train$nms)
form_test <- data.frame(cbind(x_test, y_test), stringsAsFactors = F, row.names = dat_test$nms)
saveRDS(rf, "output/rf_small_subst_grp_20192603.rds")
# Try prediction
# form_train <- data.frame(cbind(form_train[,1],
#                                scale(form_train[,2:(ncol(form_train)-1)], center = T),
#                                form_train[,ncol(form_train)]), stringsAsFactors = F)
# rf_ml <- ranger(y_train ~., data = form_train, num.trees = 500, splitrule = "gini", mtry = 69, importance = "permutation")
mod <- readRDS("output/rf_small_subst_grp_20192603.rds")
makpred <- predict(mod, newdata = aap)
mod
#### Random Forest with feature selection ####
# Random Forest using the ranger package for prediction
# Fitting mtry = 2, splitrule = gini, min.node.size = 1 on full training set
rf <- train(
x = x_train,
y = y_train,
method = "ranger",
preProc = c("center", "scale"),
trControl = trainControl(method = "cv", number = 10,
verboseIter = T, classProbs = T,
savePredictions = "final"),
# tuneGrid = tgrid,
num.trees = 500,
# respect.unordered.factors = FALSE,
verbose = TRUE,
importance = "permutation")
saveRDS(rf, "output/rf_small_subst_grp_20192603.rds")
# Try prediction
# form_train <- data.frame(cbind(form_train[,1],
#                                scale(form_train[,2:(ncol(form_train)-1)], center = T),
#                                form_train[,ncol(form_train)]), stringsAsFactors = F)
# rf_ml <- ranger(y_train ~., data = form_train, num.trees = 500, splitrule = "gini", mtry = 69, importance = "permutation")
mod <- readRDS("output/rf_small_subst_grp_20192603.rds")
makpred <- predict(mod, newdata = aap)
rf_pred <- predict(rf, newdata = form_test)
cm_rf <- confusionMatrix(rf_pred, as.factor(dat_test$clf))
cm_rf
sink("data/cm_rf_substrate_small_grp.txt")
cm_rf
sink()
View(form_test)
## Install packages
pacman::p_load('ape', 'tidyverse', 'readxl', 'stringr', 'Biostrings', 'DECIPHER', 'phangorn', 'ggplot2', 'seqinr', 'bgafun')
# Set seed
set.seed(123091)
# Set working directory
setwd("~/Documents/Wageningen_UR/github/mibig_training_set_build_test/")
# Read in the MIBiG training data
rawdat <- read_excel("data/mibig_training_set_manually_edited_20192503.xlsx")
mibig <- rawdat %>%
dplyr::filter(confidence > 0) %>%
mutate(substrate_group = str_replace_all(substrate_group, "coumarin", "aryl")) %>%
mutate(substrate_group = str_replace_all(substrate_group, "biaryl", "aryl")) %>%
mutate(substrate_group_tr = str_replace_all(substrate_group, "_", "")) %>%
mutate(functional_class = str_replace_all(functional_class, "BIARYL", "ARYL")) %>%
mutate(functional_class = str_replace_all(functional_class, "COUM", "ARYL")) %>%
mutate(functional_class = str_replace_all(functional_class, "MMCS", "SACS")) %>%
mutate(sqnams_tr = paste0(bgcs, "_", word(cmpnd, 1, sep = "_"), "_", acc, "_", substrate_group_tr, "_", functional_class)) %>%
mutate(sqnams_tr = str_replace_all(sqnams_tr, "-", "_")) %>%
mutate(sqnams_tr = str_replace_all(sqnams_tr, "\\.", "_"))
mib2 <- mibig %>%
mutate(large_substrate_group = substrate_group) %>%
mutate(small_substrate_group = case_when(functional_class == "OTHER|HOLDOUTTEST" ~ "unknown.other",
str_detect(likely_substrate, "phenylacet") ~ "phenylacetate",
str_detect(likely_substrate, "carnitine|isoleucine|leuc|proli|alanine|aminolev|threonine") ~ "amino.acid",
str_detect(likely_substrate, "stear|olei|olea|docosa|tetracosa|oxocholes|nonadec|arachi|eicosa|bile|verylongchain") ~ "C18.and.up.or.bile.acid",
# str_detect(likely_substrate, "pyrrol|pyrol") ~ "pyrrole_derivative",
str_detect(likely_substrate, "tridec|myrist|palmit|longchain|phytodien|heptadec|long_chain") ~ "C13.through.C17",
str_detect(likely_substrate, "pent|valer|hex|hept|oct|mediumchain") ~ "C5.through.C8",
str_detect(likely_substrate, "non|dec|dodec|laur") ~ "C9.through.C12",
str_detect(likely_substrate, "acetat|shortchain|acryl|prop|but|crot") ~ "C2.through.C4",
# str_detect(likely_substrate, "chlorobenz") ~ "halogenated_benzyl_derivatives",
str_detect(likely_substrate, "dihydroxybenz|salicyl|picolin|nicotin") ~ "salicylic.acid.derivatives",
str_detect(likely_substrate, "coum|cinna|vanill|ferul|succinyl|quinol") ~ "cinnamate.and.succinylbenzoate.derivatives",
str_detect(likely_substrate, "luciferin") ~ "luciferin",
str_detect(likely_substrate, "medianbetahydroxyacidlong") ~ "median.beta.hydroxyacid",
str_detect(likely_substrate, "anthran|benzo|naphth|aryl|xanthu|quin") ~ "aryl.and.biaryl.derivatives",
str_detect(likely_substrate, "malon|methylmal|oxala|acetoace") ~ "malonate.derivatives",
TRUE ~ "unknown.other"))
mib2 <- mibig %>%
mutate(large_substrate_group = substrate_group) %>%
mutate(small_substrate_group = case_when(functional_class == "OTHER|HOLDOUTTEST" ~ "unknown.other",
str_detect(likely_substrate, "phenylacet") ~ "phenylacetate",
str_detect(likely_substrate, "carnitine|isoleucine|leuc|proli|alanine|aminolev|threonine") ~ "amino.acid",
str_detect(likely_substrate, "stear|olei|olea|docosa|tetracosa|oxocholes|nonadec|arachi|eicosa|bile|verylongchain") ~ "C18.and.up.or.bile.acid",
# str_detect(likely_substrate, "pyrrol|pyrol") ~ "pyrrole_derivative",
str_detect(likely_substrate, "tridec|myrist|palmit|longchain|phytodien|heptadec|long_chain") ~ "C13.through.C17",
str_detect(likely_substrate, "pent|valer|hex|hept|oct|mediumchain") ~ "C5.through.C8",
str_detect(likely_substrate, "non|dec|dodec|laur") ~ "C9.through.C12",
str_detect(likely_substrate, "acetat|shortchain|acryl|prop|but|crot") ~ "C2.through.C4",
# str_detect(likely_substrate, "chlorobenz") ~ "halogenated_benzyl_derivatives",
str_detect(likely_substrate, "dihydroxybenz|salicyl|picolin|nicotin") ~ "salicylic.acid.derivatives",
str_detect(likely_substrate, "coum|cinna|vanill|ferul|succinyl|quinol") ~ "cinnamate.and.succinylbenzoate.derivatives",
str_detect(likely_substrate, "luciferin") ~ "luciferin",
str_detect(likely_substrate, "medianbetahydroxyacidlong") ~ "median.beta.hydroxyacid",
str_detect(likely_substrate, "anthran|benzo|naphth|aryl|xanthu|quin") ~ "aryl.and.biaryl.derivatives",
str_detect(likely_substrate, "malon|methylmal|oxala|acetoace") ~ "malonate.derivatives",
TRUE ~ "unknown.other"))
mib2$
# Read in the UniPROT KB training data
# uniprot <- read_csv("data/anl_training_set_updated_20192503_fixnams.csv") %>%
#   dplyr::filter(!grepl("coelente", substrate)) %>%
#   mutate(functional_class = str_replace_all(functional_class, "MMCS", "SACS")) %>%
#   mutate(sqnams_tr = paste0(1:nrow(.), "_", org_short, "_", substrate_group, "_", functional_class))
# uniprot$sqnams_tr
# Combine the MIBiG and the UNIPROT
# dat <- uniprot %>%
#   dplyr::mutate(likely_substrate = substrate) %>%
#   dplyr::mutate(pmid = pub_med_id) %>%
#   bind_rows(., mibig) %>%
#   dplyr::select(entry_name, organism, protein_names, likely_substrate, substrate_group, functional_class,
#                 bgcs, pmid, cmpnd, pdb_id, kinetics, ec_numbers, title, sqnams_tr, aa_seq) #%>%
#
# Reclassify likely substrate
datsub <- dat %>%
# dplyr::filter(functional_class != "HOLDOUTTEST") %>%
mutate(small_subclass = case_when(functional_class == "OTHER|HOLDOUTTEST" ~ "unknown-other",
str_detect(likely_substrate, "phenylacet") ~ "phenylacetate",
str_detect(likely_substrate, "carnitine|isoleucine|leuc|proli|alanine|aminolev|threonine") ~ "amino-acid",
str_detect(likely_substrate, "stear|olei|olea|docosa|tetracosa|oxocholes|nonadec|arachi|eicosa|bile|verylongchain") ~ "C18+-or-bile-acid",
# str_detect(likely_substrate, "pyrrol|pyrol") ~ "pyrrole_derivative",
str_detect(likely_substrate, "tridec|myrist|palmit|longchain|phytodien|heptadec|long_chain") ~ "C13-C17",
str_detect(likely_substrate, "pent|valer|hex|hept|oct|mediumchain") ~ "C5-C8",
str_detect(likely_substrate, "non|dec|dodec|laur") ~ "C9-C12",
str_detect(likely_substrate, "acetat|shortchain|acryl|prop|but|crot") ~ "C2-C4",
# str_detect(likely_substrate, "chlorobenz") ~ "halogenated_benzyl_derivatives",
str_detect(likely_substrate, "dihydroxybenz|salicyl|picolin|nicotin") ~ "salicylic-acid-derivatives",
str_detect(likely_substrate, "coum|cinna|vanill|ferul|succinyl|quinol") ~ "cinnamate-and-succinylbenzoate-derivatives",
str_detect(likely_substrate, "luciferin") ~ "luciferin",
str_detect(likely_substrate, "medianbetahydroxyacidlong") ~ "median-beta-hydroxyacid",
str_detect(likely_substrate, "anthran|benzo|naphth|aryl|xanthu|quin") ~ "aryl-and-biaryl-derivatives",
str_detect(likely_substrate, "malon|methylmal|oxala|acetoace") ~ "malonate-derivatives",
TRUE ~ "unknown-other"))
mib2 <- mibig %>%
dplyr::rename(large_substrate_group = substrate_group) %>%
mutate(small_substrate_group = case_when(functional_class == "OTHER|HOLDOUTTEST" ~ "unknown.other",
str_detect(likely_substrate, "phenylacet") ~ "phenylacetate",
str_detect(likely_substrate, "carnitine|isoleucine|leuc|proli|alanine|aminolev|threonine") ~ "amino.acid",
str_detect(likely_substrate, "stear|olei|olea|docosa|tetracosa|oxocholes|nonadec|arachi|eicosa|bile|verylongchain") ~ "C18.and.up.or.bile.acid",
# str_detect(likely_substrate, "pyrrol|pyrol") ~ "pyrrole_derivative",
str_detect(likely_substrate, "tridec|myrist|palmit|longchain|phytodien|heptadec|long_chain") ~ "C13.through.C17",
str_detect(likely_substrate, "pent|valer|hex|hept|oct|mediumchain") ~ "C5.through.C8",
str_detect(likely_substrate, "non|dec|dodec|laur") ~ "C9.through.C12",
str_detect(likely_substrate, "acetat|shortchain|acryl|prop|but|crot") ~ "C2.through.C4",
# str_detect(likely_substrate, "chlorobenz") ~ "halogenated_benzyl_derivatives",
str_detect(likely_substrate, "dihydroxybenz|salicyl|picolin|nicotin") ~ "salicylic.acid.derivatives",
str_detect(likely_substrate, "coum|cinna|vanill|ferul|succinyl|quinol") ~ "cinnamate.and.succinylbenzoate.derivatives",
str_detect(likely_substrate, "luciferin") ~ "luciferin",
str_detect(likely_substrate, "medianbetahydroxyacidlong") ~ "median.beta.hydroxyacid",
str_detect(likely_substrate, "anthran|benzo|naphth|aryl|xanthu|quin") ~ "aryl.and.biaryl.derivatives",
str_detect(likely_substrate, "malon|methylmal|oxala|acetoace") ~ "malonate.derivatives",
TRUE ~ "unknown.other"))
mib2 <- mibig %>%
dplyr::rename(large_substrate_group = substrate_group) %>%
mutate(small_substrate_group = case_when(functional_class == "OTHER|HOLDOUTTEST" ~ "unknown.other",
str_detect(likely_substrate, "phenylacet") ~ "phenylacetate",
str_detect(likely_substrate, "carnitine|isoleucine|leuc|proli|alanine|aminolev|threonine") ~ "amino.acid",
str_detect(likely_substrate, "stear|olei|olea|docosa|tetracosa|oxocholes|nonadec|arachi|eicosa|bile|verylongchain") ~ "C18.and.up.or.bile.acid",
# str_detect(likely_substrate, "pyrrol|pyrol") ~ "pyrrole_derivative",
str_detect(likely_substrate, "tridec|myrist|palmit|longchain|phytodien|heptadec|long_chain") ~ "C13.through.C17",
str_detect(likely_substrate, "pent|valer|hex|hept|oct|mediumchain") ~ "C5.through.C8",
str_detect(likely_substrate, "non|dec|dodec|laur") ~ "C9.through.C12",
str_detect(likely_substrate, "acetat|shortchain|acryl|prop|but|crot") ~ "C2.through.C4",
# str_detect(likely_substrate, "chlorobenz") ~ "halogenated_benzyl_derivatives",
str_detect(likely_substrate, "dihydroxybenz|salicyl|picolin|nicotin") ~ "salicylic.acid.derivatives",
str_detect(likely_substrate, "coum|cinna|vanill|ferul|succinyl|quinol") ~ "cinnamate.and.succinylbenzoate.derivatives",
str_detect(likely_substrate, "luciferin") ~ "luciferin",
str_detect(likely_substrate, "medianbetahydroxyacidlong") ~ "median.beta.hydroxyacid",
str_detect(likely_substrate, "anthran|benzo|naphth|aryl|xanthu|quin") ~ "aryl.and.biaryl.derivatives",
str_detect(likely_substrate, "malon|methylmal|oxala|acetoace") ~ "malonate.derivatives",
TRUE ~ "unknown.other"))
write_csv(mib2, "output/mibig_training_set_manually_edited_20192603.csv")
mibig <- rawdat %>%
# dplyr::filter(confidence > 0) %>%
mutate(substrate_group = str_replace_all(substrate_group, "coumarin", "aryl")) %>%
mutate(substrate_group = str_replace_all(substrate_group, "biaryl", "aryl")) %>%
mutate(substrate_group_tr = str_replace_all(substrate_group, "_", "")) %>%
mutate(functional_class = str_replace_all(functional_class, "BIARYL", "ARYL")) %>%
mutate(functional_class = str_replace_all(functional_class, "COUM", "ARYL")) %>%
mutate(functional_class = str_replace_all(functional_class, "MMCS", "SACS")) %>%
mutate(sqnams_tr = paste0(bgcs, "_", word(cmpnd, 1, sep = "_"), "_", acc, "_", substrate_group_tr, "_", functional_class)) %>%
mutate(sqnams_tr = str_replace_all(sqnams_tr, "-", "_")) %>%
mutate(sqnams_tr = str_replace_all(sqnams_tr, "\\.", "_"))
mibig <- rawdat %>%
# dplyr::filter(confidence > 0) %>%
mutate(substrate_group = str_replace_all(substrate_group, "coumarin", "aryl")) %>%
mutate(substrate_group = str_replace_all(substrate_group, "biaryl", "aryl")) %>%
mutate(substrate_group_tr = str_replace_all(substrate_group, "_", "")) %>%
mutate(functional_class = str_replace_all(functional_class, "BIARYL", "ARYL")) %>%
mutate(functional_class = str_replace_all(functional_class, "COUM", "ARYL")) %>%
mutate(functional_class = str_replace_all(functional_class, "MMCS", "SACS")) %>%
mutate(sqnams_tr = paste0(bgcs, "_", word(cmpnd, 1, sep = "_"), "_", acc, "_", substrate_group_tr, "_", functional_class)) %>%
mutate(sqnams_tr = str_replace_all(sqnams_tr, "-", "_")) %>%
mutate(sqnams_tr = str_replace_all(sqnams_tr, "\\.", "_"))
mib2 <- mibig %>%
dplyr::rename(large_substrate_group = substrate_group) %>%
mutate(small_substrate_group = case_when(functional_class == "OTHER|HOLDOUTTEST" ~ "unknown.other",
#  str_detect(likely_substrate, "phenylacet") ~ "phenylacetate",
str_detect(likely_substrate, "carnitine|isoleucine|leuc|proli|alanine|aminolev|threonine") ~ "amino.acid",
str_detect(likely_substrate, "stear|olei|olea|docosa|tetracosa|oxocholes|nonadec|arachi|eicosa|bile|verylongchain") ~ "C18.and.up.or.bile.acid",
# str_detect(likely_substrate, "pyrrol|pyrol") ~ "pyrrole_derivative",
str_detect(likely_substrate, "tridec|myrist|palmit|longchain|phytodien|heptadec|long_chain") ~ "C13.through.C17",
str_detect(likely_substrate, "pent|valer|hex|hept|oct|mediumchain") ~ "C5.through.C8",
str_detect(likely_substrate, "non|dec|dodec|laur") ~ "C9.through.C12",
str_detect(likely_substrate, "acetat|shortchain|acryl|prop|but|crot") ~ "C2.through.C4",
# str_detect(likely_substrate, "chlorobenz") ~ "halogenated_benzyl_derivatives",
str_detect(likely_substrate, "dihydroxybenz|salicyl|picolin|nicotin|phenylacet") ~ "salicylic.acid.derivatives",
str_detect(likely_substrate, "coum|cinna|vanill|ferul|succinyl|quinol") ~ "cinnamate.and.succinylbenzoate.derivatives",
str_detect(likely_substrate, "luciferin") ~ "luciferin",
str_detect(likely_substrate, "medianbetahydroxyacidlong") ~ "median.beta.hydroxyacid",
str_detect(likely_substrate, "anthran|benzo|naphth|aryl|xanthu|quin") ~ "aryl.and.biaryl.derivatives",
str_detect(likely_substrate, "malon|methylmal|oxala|acetoace") ~ "malonate.derivatives",
TRUE ~ "unknown.other"))
write_csv(mib2, "output/mibig_training_set_manually_edited_20192603.csv")
mib3 <- read_csv("data/mibig_training_set_manual_edited_20192603.xlsx")
mib3 <- read_excel("data/mibig_training_set_manual_edited_20192603.xlsx")
# Set working directory
setwd("~/Documents/Wageningen_UR/github/mibig_training_set_build_test/")
# Read in the MIBiG training data
rawdat <- read_excel("data/mibig_training_set_manually_edited_20192603.xlsx")
rawdat$large_substrate_group
rawdat$large_substrate_group <- gsub("_", "", rawdat$large_substrate_group)
write_csv(rawdat, "data/mibig_training_set_manually_edited_20192603.xlsx")
write_csv(rawdat, "data/mibig_training_set_manually_edited_20192603.csv")
rawdat$functional_class <- gsub("PEPTIDE", "NRPS", rawdat$functional_class)
write_csv(rawdat, "data/mibig_training_set_manually_edited_20192603.csv")
# Read in the MIBiG training data
rawdat <- read_excel("data/mibig_training_set_manually_edited_20192603.xlsx")
rawdat$large_substrate_group <- gsub("_", "", rawdat$large_substrate_group)
rawdat$functional_class <- gsub("PEPTIDE", "NRPS", rawdat$functional_class)
write_csv(rawdat, "data/mibig_training_set_manually_edited_20192603.csv")
# Read in the MIBiG training data
rawdat <- read_excel("data/mibig_training_set_manually_edited_20192603.xlsx")
rawdat$large_substrate_group <- gsub("_", "", rawdat$large_substrate_group)
rawdat$functional_class <- gsub("PEPTIDE", "NRPS", rawdat$functional_class)
rawdat$small_substrate_group[rawdat$likely_substrate == "phenylacetate"] <- "cinnamate.and.succinylbenzoate.derivatives"
write_csv(rawdat, "data/mibig_training_set_manually_edited_20192603.csv")
