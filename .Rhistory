dat <- read_csv("data/412_seqs_782_feats_for_supervised.csv")
750 * 5
3750 - (500 * 5)
1250 - 375
---
output: html_document
runtime: shiny
---
library(shiny)
library(DECIPHER)
library(Biostrings)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose a FASTA File",
multiple = FALSE)
# Horizontal line ----
tags$hr(),
# Input: Select separator ----
radioButtons("seqtype", "Sequence type",
choices = c(Nucleotide = "nuc",
Protein = "aa"),
selected = "aa"),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- readXStringSet(input$file1$datapath)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
}
# Create Shiny app ----
shinyApp(ui, server)
---
output: html_document
runtime: shiny
---
library(shiny)
library(DECIPHER)
library(Biostrings)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose a FASTA File",
multiple = FALSE)
# Horizontal line ----
tags$hr(),
# Input: Select separator ----
radioButtons("seqtype", "Sequence type",
choices = c(Nucleotide = "nuc",
Protein = "aa"),
selected = "aa")
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- readXStringSet(input$file1$datapath)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
}
# Create Shiny app ----
shinyApp(ui, server)
---
output: html_document
runtime: shiny
---
library(shiny)
library(DECIPHER)
library(Biostrings)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose a FASTA File",
multiple = FALSE)
# Horizontal line ----
tags$hr(),
# Input: Select separator ----
radioButtons("seqtype", "Sequence type",
choices = c(Nucleotide = "nuc",
Protein = "aa"),
selected = "aa")
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
# radioButtons("disp", "Display",
#              choices = c(Head = "head",
#                          All = "all"),
#              selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- readXStringSet(input$file1$datapath)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
}
# Create Shiny app ----
shinyApp(ui, server)
---
output: html_document
runtime: shiny
---
library(shiny)
library(DECIPHER)
library(Biostrings)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose a FASTA File",
multiple = FALSE)
# Horizontal line ----
tags$hr(),
# Input: Select separator ----
radioButtons("seqtype", "Sequence type",
choices = c(Nucleotide = "nuc",
Protein = "aa"),
selected = "aa"),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
# radioButtons("disp", "Display",
#              choices = c(Head = "head",
#                          All = "all"),
#              selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- readXStringSet(input$file1$datapath)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
}
# Create Shiny app ----
shinyApp(ui, server)
---
output: html_document
runtime: shiny
---
library(shiny)
library(DECIPHER)
library(Biostrings)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose a FASTA File",
multiple = FALSE)
# Horizontal line ----
tags$hr(),
# Input: Select separator ----
radioButtons("seqtype", "Sequence type",
choices = c(Nucleotide = "nuc",
Protein = "aa"),
selected = "aa"),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- readXStringSet(input$file1$datapath)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
}
# Create Shiny app ----
shinyApp(ui, server)
---
output: html_document
runtime: shiny
---
library(shiny)
library(DECIPHER)
library(Biostrings)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose a FASTA File",
multiple = FALSE),
# Horizontal line ----
tags$hr(),
# Input: Select separator ----
radioButtons("seqtype", "Sequence type",
choices = c(Nucleotide = "nuc",
Protein = "aa"),
selected = "aa"),
# Horizontal line ----
tags$hr(),
# Input: Select number of rows to display ----
radioButtons("disp", "Display",
choices = c(Head = "head",
All = "all"),
selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
df <- readXStringSet(input$file1$datapath)
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
if(input$disp == "head") {
return(head(df))
}
else {
return(df)
}
})
}
# Create Shiny app ----
shinyApp(ui, server)
---
output: html_document
runtime: shiny
---
library(shiny)
library(DECIPHER)
library(Biostrings)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("file1", "Choose a FASTA File",
multiple = FALSE),
# Horizontal line ----
tags$hr(),
# Input: Select separator ----
radioButtons("seqtype", "Sequence type",
choices = c(Nucleotide = "nuc",
Protein = "aa"),
selected = "aa")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$file1)
# when reading semicolon separated files,
# having a comma separator causes `read.csv` to error
tryCatch(
{
if(input$seqtype == "aa") {
return(readAAStringSet(input$file1$datapath))
}
else {
return(readDNAStringSet(input$file1$datapath))
}
})
},
error = function(e) {
# return a safeError if a parsing error occurs
stop(safeError(e))
}
)
}
# Create Shiny app ----
shinyApp(ui, server)
(500 * 5)
(750 * 5)
3750 - 2500
1250 - 375
3228/5
3220/5
setwd("~/Documents/Wageningen_UR/github/mibig_training_set_build_test/")
knitr::opts_chunk$set(echo = TRUE, root.dir = "~/Documents/Wageningen_UR/github/mibig_training_set_build_test/")
pacman::p_load("caret", "Biostrings", "phangorn", "ape", "seqinr", "DECIPHER", "cowplot", "tidymodels", "ranger", "tree", "rsample", "tidyverse", "randomForest","gbm","nnet","e1071","svmpath","lars","glmnet","svmpath")
# Read in the data
rawdat <- read_csv("data/1742_seqs_510_feats_for_supervised_20190204.csv")
# Read in the data
rawdat <- read_csv("data/1742_seqs_510_feats_for_supervised_20190104.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/Wageningen_UR/github/mibig_training_set_build_test/")
pacman::p_load("caret", "Biostrings", "phangorn", "ape", "seqinr", "DECIPHER", "cowplot", "tidymodels", "ranger", "tree", "rsample", "tidyverse", "randomForest","gbm","nnet","e1071","svmpath","lars","glmnet","svmpath")
rf_pred <- predict(rf, newdata = form_test)
# Read in the RF model
rf <- readRDS("data/model_comparisons/rf_small_subst_group_20190204.rds")
# Confusion matrix
getTrainPerf(rf)
rf_pred <- predict(rf, data = form_test)
# Read in the data
rawdat <- read_csv("data/1742_seqs_510_feats_for_supervised_20190104.csv")
# Read in the RF model
rf <- readRDS("data/model_comparisons/rf_small_subst_group_20190204.rds")
rf$predictions
rf_pred <- predict(rf, newdata = form_test)
134/2
935/8
1453/8
## Install packages
pacman::p_load("caret", "data.table", "Biostrings", "phangorn", "ape", "seqinr", "DECIPHER", "cowplot", "tidymodels", "ranger", "tree", "rsample", "tidyverse", "randomForest","gbm","nnet","e1071","svmpath","lars","glmnet","svmpath")
# Set working directory
setwd("~/Documents/Wageningen_UR/github/mibig_training_set_build_test/")
# Set seed
set.seed(20191604)
# Read in the training set
grp_comb <- readAAStringSet("output/20191604_small_substrate_grp_for_rf_duplicates_included_py.fasta")
head(grp_comb)
